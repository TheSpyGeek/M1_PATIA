(define (domain ANOI)
	(:requirements :strips :typing)
	(:types tower rondelle)
	(:predicates 
		(ontower ?x - rondelle ?t - tower)
		(on ?x - rondelle ?y - rondelle)
		(clearAbove ?x - rondelle)
		(clearUnder ?x - rondelle)
		(towerclear ?t - tower)
	)
	(:action move
		:parameters (?x - rondelle ?t1 - tower ?y - rondelle ?t2 - tower ?z - rondelle)
		:precondition (and (clearAbove ?x) (on ?x ?y) (ontower ?x ?t1) (clearAbove ?z) (ontower ?z ?t2))
		:effect (and 
			(not (ontower ?x ?t1))
			(not (on ?x ?y))
			(not (clearAbove ?z))
			(ontower ?x ?t2)
			(on ?x ?z)
			(clearAbove ?y)
		)
	)
	(:action moveOnClearTower
		:parameters (?x - rondelle ?t1 - tower ?y - rondelle ?t2 - tower)
		:precondition (and (clearAbove ?x) (on ?x ?y) (ontower ?x ?t1) (towerclear ?t2))
		:effect (and 
			(not (ontower ?x ?t1))
			(not (on ?x ?y))
			(not (towerclear ?t2))
			(ontower ?x ?t2)
			(clearUnder ?x)
			(clearAbove ?y)
		)
	)
	(:action moveFromClearTower
		:parameters (?x - rondelle ?t1 - tower ?t2 - tower ?z - rondelle)
		:precondition (and (clearAbove ?x) (clearUnder ?x) (ontower ?x ?t1) (clearAbove ?z) (ontower ?z ?t2))
		:effect (and 
			(not (ontower ?x ?t1))
			(not (clearUnder ?x))
			(not (clearAbove ?z))
			(ontower ?x ?t2)
			(towerclear ?t1)
			(on ?x ?z)
		)
	)
	(:action moveFromClearTowerOnClearTower
		:parameters (?x - rondelle ?t1 - tower ?t2 - tower)
		:precondition (and (clearAbove ?x) (clearUnder ?x) (ontower ?x ?t1) (towerclear ?t2))
		:effect (and 
			(not (ontower ?x ?t1))
			(not (towerclear ?t2))
			(ontower ?x ?t2)
			(towerclear ?t1)
		)
	)
)